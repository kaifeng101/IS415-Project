{
  "hash": "bc722fd3102adae0b5375fa1db146244",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 11 -Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method\"\nauthor: \"kai feng\"\ndate: \"Nov 11, 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n# 1.0 Setup\n\n### 1.1 Installing R-Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf, tmap, httr, performance)\n```\n:::\n\n\n### 1.2 Importing data\n\nThis code chunks import multiple csv files in a specified folder and append them into a single tibble data frame.\n\n::: panel-tabset\n\n::: {.cell}\n\n```{.r .cell-code}\nfolder_path <- \"data/aspatial\"\n\nfile_list <- list.files(path = folder_path,\n                        pattern = \"^realis.*\\\\.csv$\",\n                        full.names = TRUE)\n\nrealis_data <- file_list %>% \n  map_dfr(read_csv)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 10000 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): Project Name, Sale Date, Address, Type of Sale, Type of Area, Nett...\ndbl  (2): Area (SQM), Number of Units\nnum  (4): Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Unit Price ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 6643 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): Project Name, Sale Date, Address, Type of Sale, Type of Area, Nett...\ndbl  (1): Number of Units\nnum  (5): Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Area (SQM),...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n:::\n\n### 1.3 Data Wrangling\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale <- realis_data %>% \n  mutate(`Sale Date` = dmy(`Sale Date`)) %>% \n  filter(`Type of Sale` == \"Resale\" &\n           `Property Type` == \"Condominium\")\n```\n:::\n\n\n### 1.4 Geocoding\n\n\n::: {.cell}\n\n```{.r .cell-code}\npostcode <-unique(condo_resale$`Postal Code`)\n\nurl <- \"https://onemap.gov.sg/api/common/elastic/search\"\nfound <- data.frame()\nnot_found <- data.frame()\n\nfor (postcode in postcode) {\n  query <- list('searchVal'=postcode, 'returnGeom'='Y',\n                'getAddrDetails'='Y', 'pageNum'='1')\n  res <- GET(url, query=query)\n  \n  if ((content(res)$found) != 0) {\n    found <- rbind(found, data.frame(content(res))[4:13])\n  }\n  else {\n    not_found = data.frame(postcode)\n  }\n}\n\nwrite_rds(found, \"data/rds/found.rds\")\n```\n:::\n\n\n### 1.5 Tidying field names\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfound <- read_rds(\"data/rds/found.rds\")\n\nfound1 <- found %>% \n  select(c(6:8)) %>% \n  rename(POSTAL = `results.POSTAL`,\n         XCOORD = `results.X`,\n         YCOORD = `results.Y`)\n```\n:::\n\n\n### 1.6 Converting\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Joining table\ncondo_resale_geocoded = left_join(\n  condo_resale, found1,\n  by = c(\"Postal Code\" = 'POSTAL')\n)\n\n# Convert to sf\ncondo_resale_sf <- st_as_sf(condo_resale_geocoded,\n                            coords = c('XCOORD', # must start with this first\n                                       'YCOORD'),\n                            crs = 3414)\n```\n:::\n\n\n### 1.7 Cleaning Spatial Data\n\n::: panel-tabset\n## Checking for overlapping point features\n\n\n::: {.cell}\n\n```{.r .cell-code}\noverlapping_points <- condo_resale_sf %>% \n  mutate(overlap = lengths(st_equals(., .)) > 1)\n```\n:::\n\n\n## Spatial jittering\n\nIf there is overlapping, will use Spatial jittering to move point features by 5m to avoid overlapping point features\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale_sf <- condo_resale_sf %>% \n  st_jitter(amount = 2)\n```\n:::\n\n:::\n\n<br/><br/>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}